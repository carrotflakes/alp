import { gql, useLazyQuery, useMutation } from '@apollo/client'
import firebase from 'firebase'
import Head from 'next/head'
import Link from 'next/link'
import { useCallback, useContext, useState } from 'react'
import { ChatView } from '../components/ChatView'
import { AuthContext } from '../context/auth'
import { useAllMessagesQuery, useMessageAddedSubscription } from "../generated/graphql"
import styles from '../styles/Home.module.css'

export default function Home() {
  const { currentUser } = useContext(AuthContext)

  const { loading, error, data } = useAllMessagesQuery();

  const [postMessage, {data: posted}] = useMutation(gql`
  mutation($text: String) {
    postMessage(text: $text)
  }
  `)

  const [addedMessages, setAddedMessages] = useState([] as any[])

  const onSubscriptionData = useCallback((x) => {
    const message = x.subscriptionData.data.messages.message
    setAddedMessages([...addedMessages, message])
  }, [addedMessages])

  const sub = useMessageAddedSubscription({
    onSubscriptionData,
  })

  const [inputText, setInputText] = useState("")

  const post = useCallback(() => {
    postMessage({variables: {text: inputText}})
    setInputText("")
  }, [inputText, postMessage])

  const messages = [...(data?.allMessages || []), ...addedMessages]

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {
          currentUser ?
          <div>signed in as {currentUser?.displayName}<div onClick={() => firebase.auth().signOut()}>sign out</div></div> :
          <div>please <Link href="/signin">sign in</Link></div>
        }
        <div>query loading: {loading}</div>
        <div>query error: {JSON.stringify(error)}</div>
        <div>subscription loading: {sub.loading}</div>
        <div>subscription error: {JSON.stringify(sub.error)}</div>
        <div>subscription: {JSON.stringify(sub.data?.messages.message?.text)}</div>
        {/* <div className="bg-blue-300 border-black border-2">
          {messages.map((e: any, i: number) => (<div key={i}>{e.uid + ": " + JSON.stringify(e.text)}</div>))}
        </div> */}

        <ChatView width={400} height={400}></ChatView>
        <div className="w-[400px]">
          <input
            className="border-black border-2"
            type="text"
            value={inputText}
            onChange={e => setInputText(e.target.value)}
            onKeyDown={e => {e.shiftKey && e.key === "Enter" && post()}}
          ></input>
          <button onClick={post}>send</button>
        </div>
      </main>
    </div>
  )
}
